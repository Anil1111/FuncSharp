<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="../../../CodeGen/Helpers.ttinclude" #>
using System;

namespace FuncSharp
{
    public partial class Union
    {
<# for (var i = 1; i < MaxArity(); i++) { #>
<#     for (var j = 1; j <= i; j++) { #>
        /// <summary>
        /// Creates a new <#= i #>-dimensional union with the <#= GetLowerOrdinal(i) #> value.
        /// </summary>
        public static <#= UnionType(i) #> Create<#= GetOrdinal(j) #><#= TypeBracket(i) #>(<#= Parameter(j) #>)
        {
            return new <#= UnionType(i) #>(<#= j #>, <#= Value(j) #>);
        }

<#     } #>
<# } #>
    }

<# for (var i = 0; i < MaxArity(); i++) { #>
    /// <summary>
    /// A <#= i #>-dimensional union.
    /// </summary> 
    public class <#= UnionType(i) #> : Union
    {
        /// <summary>
        /// Creates a new <#= i #>-dimensional union.
        /// </summary>
        internal Union<#= i #>(int discriminator, object value)
            : base(<#= i #>, discriminator, value)
        {
        }
<#     for (var j = 1; j <= i; j++) { #>

        /// <summary>
        /// Returns whether the union contains the <#= GetLowerOrdinal(j) #> value.
        /// </summary>
        public bool Is<#= GetOrdinal(j) #>
        {
            get { return SumDiscriminator == <#= j #>; }
        }

        /// <summary>
        /// Returns <#= GetLowerOrdinal(j) #> value of the union as an option. The option contains the <#= GetLowerOrdinal(j) #> value
        /// or is empty if the union contains different value.
        /// </summary>
        public IOption<<#= Type(j) #>> <#= GetOrdinal(j) #>
        {
            get
            { 
                return PartialMatch(
                    if<#= GetOrdinal(j) #>: v => Option.Some(v),
                    otherwise: _ => Option.None<<#= Type(j) #>>()
                );
            }
        }
<#     } #>
<#     if (i > 0) { #>

        /// <summary>
        /// Returns result of a function that corresponds to the union value. E.g. if the union is the first value, returns result
        /// of the <paramref name="ifFirst" /> function.
        /// </summary>
        public R Match<R>(
<#= Lines(i, x => Indent(12) + "Func<T" + x + ", R> " + IfFunction(x), separator: ",") #>)
        {
            switch (SumDiscriminator)
            {
<#= Lines(i, x => Indent(16) + "case " + x + ": return " + IfFunction(x) + "(GetSumValue<T" + x + ">());") #>
                default: return default(R); // Never happens.
            }
        }

        /// <summary>
        /// Returns result of a function that corresponds to the union value similarly to match. If the function is null, returns result
        /// of the <paramref name="otherwise">otherwise</paramref> function. If the <paramref name="otherwise">otherwise</paramref> function 
        /// is null, returns default value of the result type. 
        /// </summary>
        public R PartialMatch<R>(
<#= Lines(i, x => Indent(12) + "Func<T" + x + ", R> " + IfFunction(x) + " = null", separator: ",") #>,
            Func<object, R> otherwise = null)
        {
            otherwise = otherwise ?? (_ => default(R));
            return Match(
<#= Lines(i, x => Indent(16) + "v => " + IfFunction(x) + " == null ? otherwise(v) : " + IfFunction(x) + "(v)", separator: ",") #>
            );
        }
<#     } #>
    }

<# } #>
}

<#+
    public string IfFunction(int i)
    {
        return "if" + GetOrdinal(i);
    }

#>
