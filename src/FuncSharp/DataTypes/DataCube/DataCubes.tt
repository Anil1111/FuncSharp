<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="../../CodeGen/Helpers.ttinclude" #>
using System;
using System.Collections.Generic;
using System.Linq;

namespace FuncSharp
{
<# for (var i = 0; i < MaxStructureArity(); i++) { #>
    /// <summary>
    /// A <#= i #>-dimensional data cube.
    /// </summary>
    public class <#= DataCubeType(i) #> : DataCube<<#= ProductType(i, name: "P") #>, TValue>
    {
        /// <summary>
        /// Creates an empty <#= i #>-dimensional data cube. 
        /// </summary>
        public DataCube<#= i #>()
        {
<#      for (var j = 1; j <= i; j++) { #>
            Domain<#= j #>Counts = new Dictionary<IProduct1<P<#= j #>>, int>();
<#      } #>
        }

        /// <summary>
        /// Creates a <#= i #>-dimensional data cube filled with the specified data. If multiple values with the same position
        /// appear among the initial data, last one is used.
        /// </summary>
        public DataCube<#= i #>(IEnumerable<IProduct2<<#= ProductType(i, name: "P") #>, TValue>> initialData)
            : this()
        {
            foreach (var d in initialData)
            {
                Set(d.ProductValue1, d.ProductValue2);
            }
        }

<#      if (i > 0) { #>
        /// <summary>
        /// Creates a <#= i #>-dimensional data cube filled with the specified data. If multiple values with the same position
        /// appear among the initial data, last one is used.
        /// </summary>
        public DataCube<#= i #>(IEnumerable<IProduct<#= i + 1 #><<#= Types(i, name: "P") #>, TValue>> initialData)
            : this()
        {
            foreach (var d in initialData)
            {
                Set(d.ExceptValue<#= i + 1 #>, d.ProductValue<#= i + 1 #>);
            }
        }

<#      } #>
<#      if (i == 0) { #>
        /// <summary>
        /// The only value in the cube.
        /// </summary>
        public IOption<TValue> Value 
        { 
            get { return Get(); }
        }

<#      } #>
<#      for (var j = 1; j <= i; j++) { #>
        /// <summary>
        /// Positions of values in the <#= GetLowerOrdinal(j) #> dimension (domain of that dimension).
        /// </summary>
        public IEnumerable<P<#= j #>> Domain<#= j #>
        {
            get { return Domain<#= j #>Counts.Keys.Select(p => p.ProductValue1); }
        }

<#      } #>
<#      for (var j = 1; j <= i; j++) { #>
        private Dictionary<IProduct1<P<#= j #>>, int> Domain<#= j #>Counts { get; set; }

<#      } #>
        /// <summary>
        /// For each value in the cube, invokes the specified function passing in the position and the stored value.
        /// </summary>
        public void ForEach(Action<<#= Types(i, name: "P", appendSeparator: true) #>TValue> a)
        {
            ForEach((position, value) => a(<#= Properties(i, name: "ProductValue", accessor: "position.", appendSeparator: true) #>value));
        }

        /// <summary>
        /// Returns whether the cube contains a value at the specified position.
        /// </summary>
        public bool Contains(<#= Parameters(i, name: "P") #>)
        {
            return Contains(Product.Create(<#= Values(i, name: "P") #>));
        }

        /// <summary>
        /// Returns value at the specified position.
        /// </summary>
        public IOption<TValue> Get(<#= Parameters(i, name: "P") #>)
        {
            return Get(Product.Create(<#= Values(i, name: "P") #>));
        }

        /// <summary>
        /// Returns value at the specified position. If there is no value present, sets the position to value generated by 
        /// the <paramref name="setter"/> function and returns the newly generated value.
        /// </summary>
        public TValue GetOrElseSet(<#= Parameters(i, name: "P", appendSeparator: true) #>Func<Unit, TValue> setter)
        {
            return GetOrElseSet(Product.Create(<#= Values(i, name: "P") #>), setter);
        }
        
        /// <summary>
        /// Sets value at the specified position. If there is value already present at that position, overwrites it.
        /// </summary>
        public override TValue Set(<#= ProductType(i, name: "P") #> position, TValue value)
        {
<#      for (var j = 1; j <= i; j++) { #>
            AddDomain(Domain<#= j #>Counts, position.ProductValue<#= j #>);
<#      } #>
            return base.Set(position, value);
        }

        /// <summary>
        /// Sets value at the specified position. If there is value already present at that position, overwrites it.
        /// </summary>
        public TValue Set(<#= Parameters(i, name: "P", appendSeparator: true) #>TValue value)
        {
            return Set(Product.Create(<#= Values(i, name: "P") #>), value);
        }

        /// <summary>
        /// Sets value at the specified position. If there is value already present at that position, updates it with the
        /// result of the <paramref name="updater"/> function which is given the present value and the new value.
        /// </summary>
        public TValue SetOrElseUpdate(<#= Parameters(i, name: "P", appendSeparator: true) #>TValue value, Func<TValue, TValue, TValue> updater)
        {
            return SetOrElseUpdate(Product.Create(<#= Values(i, name: "P") #>), value, updater);
        }
<#      for (var j = 0; j <= i; j++) { #>

        /// <summary>
        /// Transforms the current cube into a new cube. The transformation is directed by two functions. 
        /// The <paramref name="positionMapper"/> maps positions of values in the current cube into positions 
        /// in the new cube. If there are multiple values in the current cube, whose positions are mapped onto 
        /// the same position in the new cube, then the <paramref name="aggregator"/> function is used to 
        /// aggregate all the colliding values into one value.
        /// </summary>
        public <#= DataCubeType(j, positionType: "Q") #> Transform<#= TypeBracket(j, name: "Q") #>(Func<<#= ProductType(i, name: "P") #>, <#= ProductType(j, name: "Q") #>> positionMapper, Func<TValue, TValue, TValue> aggregator)
        {
            return Transform<<#= ProductType(j, name: "Q") #>, <#= DataCubeType(j, positionType: "Q") #>>(positionMapper, aggregator);
        }
<#          if (j > 0) { #>

        /// <summary>
        /// Transforms the current <#= i #>-dimensional cube into a <#= i - 1 #>-dimensional cube by excluding the dimension <#= j #>.
        /// All values whose position differ just in dimension <#= j #> (their positions without dimension <#= j #> are the same) are 
        /// aggregated using the <paramref name="aggregator"/> function into one value. This value is stored into the new cube with the 
        /// position without dimension <#= j #>.
        /// </summary>
        public <#= DataCubeType(i, except: j) #> RollUpDimension<#= j #>(Func<TValue, TValue, TValue> aggregator)
        {
            return Transform(p => p.ExceptValue<#= j #>, aggregator);
        }

        /// <summary>
        /// Slices the current cube in the dimension <#= j #>. The slices are <#= i - 1 #>-dimensional cubes without dimension <#= j #> of
        /// the current cube. Returns a new 1-dimensional cube where the values are the slices and the positions are values in 
        /// the sliced dimension.
        /// </summary>
        public DataCube1<<#= Type(j, name: "P") #>, <#= DataCubeType(i, except: j) #>> SliceDimension<#= j #>()
        {
            var slices = new DataCube1<<#= Type(j, name: "P") #>, <#= DataCubeType(i, except: j) #>>();
            ForEach((position, value) =>
            {
                var slice = slices.GetOrElseSet(position.ProductValue<#= j #>, _ => new <#= DataCubeType(i, except: j) #>());
                slice.Set(position.ExceptValue<#= j #>, value);
            });
            return slices;
        }
<#          } #>
<#      } #>

        /// <summary>
        /// Returns canonical position corresponding to the specified product.
        /// </summary>
        protected override <#= ProductType(i, name: "P") #> ToCanonicalPosition(<#= ProductType(i, name: "P") #> position)
        {
            return Product.Create(position);
        }
    }

<# } #>
}