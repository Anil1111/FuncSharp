<#+
    public int MaxArity()
    {
        return 10;
    }

    public string Type(int i, string name = "T")
    {
        return name + i;
    }

    public string Types(int i, string name = "T", int? except = null, bool appendSeparator = false)
    {
        return List(i, x => Type(x, name), except: except, appendSeparator: appendSeparator);
    }

    public string TypeBracket(int i, string name = "T", int? except = null)
    {
        if (i == 0 || except.HasValue && i == 1)
        {
            return "";
        }
        return "<" + Types(i, name: name, except: except) + ">";
    }

    public string VectorType(int i, string name = "T", int? except = null)
    {
        var arity = i - (except.HasValue ? 1 : 0);
        return "Vector" + arity + TypeBracket(i, name: name, except: except);
    }

    public string FuncTypes(int i, string resultTypeName = "TResult", string name = "T", int? except = null)
    {
        return Types(i, name, except, appendSeparator: true) + resultTypeName;
    }

    public string FuncType(int i, string resultTypeName = "TResult", string name = "T", int? except = null)
    {
        return "Func<" + FuncTypes(i, resultTypeName, name, except) + ">";
    }

    public string Value(int i, string name = "T")
    {
        return Type(i, name: name).ToLowerInvariant();
    }

    public string Values(int i, string name = "T", int? except = null) 
    {
        return Types(i, name: name).ToLowerInvariant();
    }

    public string Parameters(int i, string name = "T", int? except = null, bool appendSeparator = false)
    {
        return List(i, x => Type(x, name: name) + " " + Value(x, name: name), appendSeparator: appendSeparator);
    }

    public string Property(int i, string name = "Value", string accessor = "")
    {
        return accessor + name + i;
    }

    public string Properties(int i, string name = "Value", string accessor = "", int? except = null, bool appendSeparator = false) 
    {
        return List(i, x => Property(x, name, accessor), except, appendSeparator: appendSeparator);
    }

    public string Indent(int i)
    {
        return new String(' ', i);
    }

    public string List(int i, Func<int, string> itemGenerator, int? except = null, string separator = ", ", bool appendSeparator = false)
    {
        var numbers = Enumerable.Range(1, i);
        if (except.HasValue)
        {
            numbers = numbers.Except(new[] { except.Value });
        }
        var result = String.Join(separator, numbers.Select(itemGenerator));
        if (appendSeparator && !String.IsNullOrEmpty(result))
        {
            result += separator;
        }
        return result;
    }
#>