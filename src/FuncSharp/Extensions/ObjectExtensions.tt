<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="../CodeGen/Helpers.ttinclude" #>
using System;

namespace FuncSharp
{
    public static class ObjectExtensions
    {
        /// <summary>
        /// Returns whether the two specified objects are structurally equal. The only difference from
        /// Object.Equals is that it checks type of the second object <paramref name="o2"/> before the
        /// Equals method is actually invoked. Note that two nulls are structurally equal.
        /// </summary>
        public static bool StructurallyEquals(this object o1, object o2)
        {
            return o1.FastEquals(o2).GetOrElse(() => o1.Equals(o2));
        }

        /// <summary>
        /// Returns whether the objects are structurally equal based on references and their types, which is the 
        /// fastest check possible, since Equals method is not invoked. If it can't be decided just from that, 
        /// an empty option is returned. In that case it's however sure that both objects are not null and that the
        /// second object <paramref name="o2"/> is of the same type. Note that two nulls are structurally equal.
        /// </summary>
        /// <example>
        /// Useful when overriding Equals method. You can invoke it first and use its return value. And only
        /// if the result is empty, you should continue comparing structures of the objects.
        /// </example>
        public static IOption<bool> FastEquals(this object o1, object o2)
        {
            if (o1 == o2)
            {
                return true.ToOption();
            }
            if (o1 == null || o2 == null)
            {
                return false.ToOption();
            }
            if (o1.GetType() != o2.GetType())
            {
                return false.ToOption();
            }

            return Option.None<bool>();
        }

        /// <summary>
        /// Returns string representation of the object. If the object is null, return the optionally specified null text.
        /// </summary>
        public static string SafeToString(this object o, string nullText = "null")
        {
            if (o == null)
            {
                return nullText;
            }
            return o.ToString();
        }

        /// <summary>
        /// Turns the specified value into an option.
        /// </summary>
        public static IOption<T> ToOption<T>(this T value)
        {
            return Option.Create(value);
        }

<# for (var i = 0; i < MaxArity(); i++) { #>
        /// <summary>
        /// Creates a new <#= i #>-dimensional sum as a result of type match. The specified value will be on the first place whose type 
        /// matches type of the value. If none of the types matches type of the value, returns result of the otherwise function. In case
        /// when the otherwise function is null, throws an exception.
        /// </summary>
        public static <#= SumType(i) #> AsSum<#= TypeBracket(i) #>(this object value, Func<object, <#= SumType(i) #>> otherwise = null)
        {
<#     for (var j = 1; j <= i; j++) { #>
            if (value is <#= Type(j) #>)
            {
                return Sum.Create<#= GetOrdinal(j) #><#= TypeBracket(i) #>((<#= Type(j) #>)value);
            }
<#     } #>
            if (otherwise != null)
            {
                return otherwise(value);
            }
            throw new ArgumentException("The value " + value.SafeToString() + " does not match any of the <#= i #> specified types.");
        }

<#     if (i + 1 < MaxArity()) { #>
<#         var safeTypeBracket = "<" + Types(i, appendSeparator: true) + "object>"; #>
        /// <summary>
        /// Creates a new <#= i + 1 #>-dimensional sum as a result of type match. The specified value will be on the first place whose 
        /// type matches type of the value. If none of the types matches type of the value, then the value will be placed in the last place.
        /// </summary>
        public static <#= "Sum" + (i + 1) + safeTypeBracket #> AsSafeSum<#= TypeBracket(i) #>(this object value)
        {
            return value.AsSum<#= safeTypeBracket #>(v => Sum.Create<#= GetOrdinal(i + 1) #><#= safeTypeBracket #>(v));
        }

<#     } #>
<# } #>
    }
}