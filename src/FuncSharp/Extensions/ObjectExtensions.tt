<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="../CodeGen/Helpers.ttinclude" #>
using System;

namespace FuncSharp
{
    public static class ObjectExtensions
    {
        /// <summary>
        /// Casts the specified object to the given type.
        /// </summary>
        public static IOption<T> As<T>(this object o)
            where T : class
        {
            return (o as T).ToOption();
        }

        /// <summary>
        /// Returns string representation of the object. If the object is null, return the optionally specified null text.
        /// </summary>
        public static string SafeToString(this object o, string nullText = "null")
        {
            if (o == null)
            {
                return nullText;
            }
            return o.ToString();
        }

        /// <summary>
        /// Turns the specified value into a definite. Throws an exception if the value is null. 
        /// </summary>
        public static IDefinite<T> ToDefinite<T>(this T value)
        {
            return Definite.Create(value);    
        }

        /// <summary>
        /// Turns the specified value into an option.
        /// </summary>
        public static IOption<T> ToOption<T>(this T value)
        {
            return Option.Create(value);
        }

<# for (var i = 0; i < MaxArity(); i++) { #>
        /// <summary>
        /// Creates a new <#= i #>-dimensional coproduct as a result of type match. The specified value will be on the first place 
        /// whose type matches type of the value. If none of the types matches type of the value, returns result of the fallback 
        /// function. In case when the fallback is null, throws an exception (optionally created by the otherwise function).
        /// </summary>
        public static <#= CoproductType(i) #> AsCoproduct<#= TypeBracket(i) #>(this object value, Func<object, <#= CoproductType(i) #>> fallback = null, Func<Unit, Exception> otherwise = null)
        {
<#     for (var j = 1; j <= i; j++) { #>
            if (value is <#= Type(j) #>)
            {
                return Coproduct.Create<#= GetOrdinal(j) #><#= TypeBracket(i) #>((<#= Type(j) #>)value);
            }
<#     } #>
            if (fallback != null)
            {
                return fallback(value);
            }
            if (otherwise != null)
            {
                throw otherwise(Unit.Value);
            }
            throw new ArgumentException("The value " + value.SafeToString() + " does not match any of the <#= i #> specified types.");
        }

<#     if (i + 1 < MaxArity()) { #>
<#         var safeTypeBracket = "<" + Types(i, appendSeparator: true) + "object>"; #>
        /// <summary>
        /// Creates a new <#= i + 1 #>-dimensional coproduct as a result of type match. The specified value will be on the first place 
        /// whose type matches type of the value. If none of the types matches type of the value, then the value will be placed in 
        /// the last place.
        /// </summary>
        public static <#= "ICoproduct" + (i + 1) + safeTypeBracket #> AsSafeCoproduct<#= TypeBracket(i) #>(this object value)
        {
            return value.AsCoproduct<#= safeTypeBracket #>(v => Coproduct.Create<#= GetOrdinal(i + 1) #><#= safeTypeBracket #>(v));
        }

<#     } #>
<# } #>
    }
}