<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="../Helpers.ttinclude" #>
using System;

namespace Funcsharp.Vectors
{
    /// <summary>
    /// Extensions of the vectors and conversions of .NET classes to/from vectors.
    /// </summary>
    public static class VectorExtensions
    {
<#  for (var i = 1; i < Math.Min(GetDimensionLimit(), 7); i++) { #>
        /// <summary>
        /// Converts the vector into a tuple.
        /// </summary>
        public static Tuple<#= TypeBracket(i) #> ToTuple<#= TypeBracket(i) #>(this <#= VectorType(i) #> v)
        {
            return Tuple.Create(<#= Properties(i, accessor: "v.") #>);
        }

        /// <summary>
        /// Converts the tuple into a vector.
        /// </summary>
        public static <#= VectorType(i) #> ToVector<#= TypeBracket(i) #>(this Tuple<#= TypeBracket(i) #> t)
        {
            return Vector.Create(<#= Properties(i, name: "Item", accessor: "t.") #>);
        }

<# } #>
    }
}
